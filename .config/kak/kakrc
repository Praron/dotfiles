eval %sh{kak-lsp --kakoune -s $kak_session}
map -docstring 'lsp mode' global user l ': enter-user-mode lsp<ret>'
map -docstring 'lsp auto hover mode enable' global lsp l ': lsp-auto-hover-enable<ret>'
map -docstring 'lsp auto hover mode disable' global lsp L ': lsp-auto-hover-disable<ret>'

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload
# plug 'andreyorst/smarttab.kak' %{
#     set-option global softtabstop 4
# }
plug 'andreyorst/fzf.kak' %{
    map global normal v ': fzf-mode<ret>' -docstring 'fzf find'
    map global normal V v
    map global user V V -docstring 'view mode (lock)'
    map global user f '<esc>: fzf-file<ret>' -docstring 'fzf find file'
    set-option global fzf_file_command 'fd -t file --color=always'
    set-option global fzf_highlighter 'bat'
}
plug 'alexherbo2/search-highlighter.kak' %{
    hook global WinCreate .* %{
        search-highlighter-enable
    }
}
plug 'Delapouite/kakoune-auto-percent'
plug 'Delapouite/kakoune-auto-star'
plug 'Delapouite/kakoune-text-objects'
plug 'Delapouite/kakoune-mirror' %{
	map global user m -docstring 'mirror mode' ': enter-user-mode -lock mirror<ret>'
}
plug 'alexherbo2/auto-pairs.kak' %{
    map global user s -docstring 'surround' ':<space>auto-pairs-surround<ret>'
    map global user S -docstring 'surround++' ':<space>auto-pairs-surround _ _ * *<ret>'
    map global user <c-s> -docstring 'toggle surrounding' ': auto-pairs-toggle<ret>'
}
plug 'alexherbo2/move-line.kak' %{
    map global normal "<'>" ': move-line-below %val{count}<ret>'
    map global normal "<a-'>" ': move-line-above %val{count}<ret>'
}
plug 'alexherbo2/explore.kak' %{
    define-command -hidden -override explore-files-recursive -params 0..1 %{
      explore-files-display "fd %sh(test $kak_opt_explore_files_show_hidden = true && echo --hidden)" %arg(1)
    }
}
plug 'Delapouite/kakoune-buffers' %{
    # ciao macros
    map global normal ^ q
    map global normal <a-^> Q

    map global normal q b
    map global normal Q B
    map global normal <a-q> <a-b>
    map global normal <a-Q> <a-B>

    map global normal b ': enter-buffers-mode<ret>'              -docstring 'buffers…'
    map global normal B ': enter-user-mode -lock buffers<ret>'   -docstring 'buffers (lock)…'
}
plug 'Delapouite/kakoune-cd' %{
    map global user c ': enter-user-mode cd<ret>' -docstring 'cd'
    alias global cdb change-directory-current-buffer
    alias global cdr change-directory-project-root
    alias global ecd edit-current-buffer-directory
    alias global pwd print-working-directory
}
plug 'delapouite/kakoune-goto-file' %{
    map global goto <a-F> '<esc>: goto-file<ret>' -docstring 'file (plugin smart)'
    map -docstring 'file (my smart)' global goto F "<esc><a-i>c[ '"";],[ '"";]<ret>gf"
}
plug 'https://gitlab.com/Screwtapello/kakoune-state-save' %{
    # set-option global state_save_path '~/.config/kak/state-save/'
}
plug 'TeddyDD/kakoune-lf' %{}

colorscheme dracula
hook global InsertKey <esc> %{ colorscheme dracula}
hook global InsertBegin .* %{ colorscheme base16}

set-option global grepcmd 'rg -i --column'
map global user x ': prompt grep: %{grep %val{text}}<ret>' -docstring 'grep in files'
map global user X ': grep <c-r>.<ret>' -docstring 'grep by selection'
map global normal <c-n> ': grep-next-match<ret>' -docstring 'grep next'
map global normal <c-p> ': grep-previous-match<ret>' -docstring 'grep previous'
set global ui_options ncurses_assistant=none

hook global WinCreate ^[^*]+$ %{
    add-highlighter window/ number-lines -hlcursor -relative -separator ' '
    addhl global/ regex '\h+$' 0:default,red
    addhl global/ regex \b(TODO|FIXME|XXX|NOTE)\b|!!! 0:default+rb
    addhl global/ show-matching
    # addhl global/ dynregex '%reg{/}' 0:+u
    # addhl global/ dynregex '%opt{curword}' 0:+b
}


# Ctags file auto search
hook global KakBegin .* %{
    evaluate-commands %sh{
        path="$PWD"
        while [ "$path" != "$HOME" ] && [ "$path" != "/" ]; do
            if [ -e "./tags" ]; then
                printf "%s\n" "set-option -add current ctagsfiles %{$path/tags}"
                break
            else
                cd ..
                path="$PWD"
            fi
        done
    }
}

map global user d '<a-i>w<ret>: ctags-search<ret>' -docstring 'ctag jump to definition (smart)'
map global user <a-d> ': ctags-search<ret>' -docstring 'ctag jump to definition (dumb)'


map global normal <tab> ': bn<ret>'
map global normal <s-tab> ': bp<ret>'

map global normal / '/(?i)'

map global insert <c-h> ': echo hello'
map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'
# hook global InsertCompletionShow .* %{
    # try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        # execute-keys -draft 'h<a-K>\h<ret>'
        # map window insert <tab> <c-n>
        # map window insert <s-tab> <c-p>
    # }
# }
# hook global InsertCompletionHide .* %{
    # unmap window insert <tab> <c-n>
    # unmap window insert <s-tab> <c-p>
# }

map global insert <a-.> '<a-;><gt>'
map global insert <a-,> '<a-;><lt>'

map global normal z Z
map global normal Z <a-z>
map global normal <a-z> z

map global normal <space> ,
map global normal , <space>
map -docstring 'reduce selection' global user <space> ';'

map global normal <c-s> ': w<ret>'
map global insert <c-s> '<esc>: w<ret>i'

map global normal -docstring 'comment line' '#' ' :comment-line<ret>'
map global normal -docstring 'comment block' '<a-#>' ' :comment-block<ret>'


evaluate-commands %sh{
    case $(uname) in
        Linux) copy="xsel -ib"; paste="xsel -ob" ;;
    esac
    printf "map global user -docstring 'yank to clipboard' y '<a-|>%s<ret>: echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}
map -docstring 'paste before' global user P '!xsel --output --clipboard<ret>'
map -docstring 'paste after' global user p '<a-!>xsel --output --clipboard<ret>'
map -docstring 'paste on prev line' global user <a-P> '<a-h><a-h>!xsel --output --clipboard<ret>'
map -docstring 'paste on next line' global user <a-p> 'j<a-h><a-h><a-!>xsel --output --clipboard<ret>d'


map global user q ': q<ret>' -docstring 'quit'
map global user w ': w<ret>' -docstring 'write'
map global user = ': prompt math: %{exec "a%val{text}<lt>esc>|bc<lt>ret>"}<ret>' -docstring 'math prompt'

declare-user-mode anchor
map global anchor a '<esc><a-;>;'     -docstring 'reduce to anchor'
map global anchor c '<esc>;'          -docstring 'reduce to cursor'
map global anchor f '<esc><a-;>'      -docstring 'flip cursor and anchor'
map global anchor h '<esc><a-:><a-;>' -docstring 'ensure anchor after cursor'
map global anchor l '<esc><a-:>'      -docstring 'ensure cursor after anchor'
map global anchor s '<esc><a-S>'      -docstring 'split at cursor and anchor'
map -docstring 'anchor mode' global user a ': enter-user-mode anchor<ret>'

define-command -docstring 'print 10 random words' lorem-ipusum %{ execute-keys "!shuf -n 10 ~/Scripts/lorem-ipsum | tr '\n' ' '<ret>"}


define-command -override -docstring "select a word under cursor, or add cursor on next occurrence of current selection" \
select-or-add-cursor %{ execute-keys -save-regs '' %sh{
    if [ $(expr $(echo $kak_selection | wc -m) - 1) -eq 1 ]; then
        echo "<a-i>w*"
    else
        echo "*<s-n>"
    fi
}}
map global normal '<c-d>' ': select-or-add-cursor<ret>' -docstring "add cursor on current word, and jump to the next match"


declare-option str modeline_pos_percent
hook global WinCreate .* %{
    hook window NormalIdle .* %{ evaluate-commands %sh{
        echo "set window modeline_pos_percent '$(($kak_cursor_line * 100 / $kak_buf_line_count))'"
    } }
}



declare-option str barcmd 'lemonbar'
declare-option str bar_buflist

define-command bar-create %{
  %sh{
    {
      fifo=/tmp/kakoune/bar_$kak_session
      rm "$fifo"
      mkfifo "$fifo"
      exec 3<> "$fifo"
      cat "$fifo" | $kak_opt_barcmd -p -B '#282a36' -F '#f8f8f2' -f 'Monospace:size=9' &
    } >/dev/null 2>&1 </dev/null &
  }
  bar-refresh-buflist
}

define-command bar-refresh -params 1 %{
  %sh{
    fifo=/tmp/kakoune/bar_$kak_session
    if [ -p "$fifo" ]; then
      echo "$1" > "$fifo"
    fi
  }
}

define-command bar-destroy %{ %sh{
  fifo=/tmp/kakoune/bar_$kak_session
  rm "$fifo"
} }

hook global KakEnd .* %{ %sh{
  bar-destroy
} }

# Example with buflist
define-command bar-bufflist %{
  %sh{
    list=''
    while read buf; do
      index=$(($index + 1))
      if [ "$buf" = "$kak_bufname" ]; then
        # markup specific to lemonbar
        list="$list %{R} $index $buf %{R}"
      else
        list="$list  $index $buf "
      fi
    done <<< $(printf '%s\n' "$kak_buflist" | tr ':' '\n')
    echo "'$list'"
  }
}

define-command bar-refresh-buflist %{
  bar-bufflist
  bar-refresh %opt{bar_buflist}
}

# Suggested hooks
# hook global WinDisplay .* bar-refresh-buflist


set global modelinefmt '%val{bufname} {{context_info}} {{mode_info}} %val{cursor_line}:%val{cursor_char_column}(%opt{modeline_pos_percent}%%)'
# set global modelinefmt '{{context_info}} {{mode_info}} %val{cursor_line}:%val{cursor_char_column}(%opt{modeline_pos_percent}%%)%sh{echo "${kak_buflist//$(echo $kak_bufname | sed "s/\*//g")/[$kak_bufname]}" | sed -e "s/\x27//g" -e "s/\*debug\*//"}'
# - %val{client}@[%val{session}]

