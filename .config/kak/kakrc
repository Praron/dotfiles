source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug 'andreyorst/smarttab.kak' %{
    set-option global softtabstop 4
}
plug 'andreyorst/fzf.kak' %{
	map global normal <c-p> ': fzf-mode<ret>'
}
plug 'alexherbo2/search-highlighter.kak' %{
	hook global WinCreate .* %{
	  search-highlighter-enable
	}
}
plug 'Delapouite/kakoune-auto-percent'
plug 'delapouite/kakoune-mirror' %{
  map global normal "'" ': enter-user-mode -lock mirror<ret>'
}
plug 'alexherbo2/auto-pairs.kak' %{
	hook global WinCreate .* %{
	  auto-pairs-enable
	}
	map global user s -docstring 'surround' ':<space>auto-pairs-surround<ret>'
	map global user S -docstring 'surround++' ':<space>auto-pairs-surround _ _ * *<ret>'
}


colorscheme base16
hook global InsertKey <esc> %{ colorscheme base16 }
hook global InsertBegin .* %{ colorscheme desertex }
# hook global InsertBegin .* %{
    # echo 'INSERT'
# }
# hook global InsertEnd .* echo


set-option global grepcmd 'ag --column'
set global ui_options ncurses_assistant=none

hook global WinCreate ^[^*]+$ %{
	add-highlighter window/ number-lines -hlcursor -relative -separator ' '
	addhl global/ regex '\h+$' 0:default,red
    addhl global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb
    addhl global/ show-matching
    # addhl global/ dynregex '%reg{/}' 0:+u
	addhl global/ dynregex '%opt{curword}' 0:+b
	}

map global normal p P
map global normal P p

map global normal / '/(?i)'

map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}


map global normal <space> ,
map global normal , <space>
map -docstring 'reduce selection' global user <space> ';' 

map global normal <c-s> :w<ret>
map global insert <c-s> <esc>:w<ret>i
map global insert <c-u> '<a-;><u>'

map global normal -docstring 'comment line' '#' ' :comment-line<ret>'
map global normal -docstring 'comment block' '<a-#>' ' :comment-block<ret>'

map -docstring 'paste after' global user p '<a-!>xsel --output --clipboard<ret>'
map -docstring 'paste before' global user P '!xsel --output --clipboard<ret>'
hook global NormalKey y|d|c %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
}}


# Echo yank/paste/delete
hook global NormalKey [ydcpP] %{
	echo %reg{"}
}


declare-user-mode anchor
map global anchor a '<esc><a-;>;'     -docstring 'reduce to anchor'
map global anchor c '<esc>;'          -docstring 'reduce to cursor'
map global anchor f '<esc><a-;>'      -docstring 'flip cursor and anchor'
map global anchor h '<esc><a-:><a-;>' -docstring 'ensure anchor after cursor'
map global anchor l '<esc><a-:>'      -docstring 'ensure cursor after anchor'
map global anchor s '<esc><a-S>'      -docstring 'split at cursor and anchor'

map -docstring 'anchor mode' global user a ': enter-user-mode anchor<ret>'


declare-option str modeline_pos_percent
hook global WinCreate .* %{
    hook window NormalIdle .* %{ evaluate-commands %sh{
        echo "set window modeline_pos_percent '$(($kak_cursor_line * 100 / $kak_buf_line_count))'"
    } }
}

set global modelinefmt '%val{cursor_line}:%val{cursor_char_column}(%opt{modeline_pos_percent}%%) {{context_info}} {{mode_info}} %val{bufname} - %val{client}@[%val{session}]'
